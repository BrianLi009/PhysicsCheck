from helper import cross, dot, nested_cross 
from z3 import * 
def solve(): 
    s = Solver()
    v0c1 = Real("v0c1")
    v0c2 = Real("v0c2")
    v0c3 = Real("v0c3")
    v0= (v0c1, v0c2, v0c3)
    v1c1 = Real("v1c1")
    v1c2 = Real("v1c2")
    v1c3 = Real("v1c3")
    v1= (v1c1, v1c2, v1c3)
    v2c1 = Real("v2c1")
    v2c2 = Real("v2c2")
    v2c3 = Real("v2c3")
    v2= (v2c1, v2c2, v2c3)
    v3c1 = Real("v3c1")
    v3c2 = Real("v3c2")
    v3c3 = Real("v3c3")
    v3= (v3c1, v3c2, v3c3)
    v4c1 = Real("v4c1")
    v4c2 = Real("v4c2")
    v4c3 = Real("v4c3")
    v4= (v4c1, v4c2, v4c3)
    v5c1 = Real("v5c1")
    v5c2 = Real("v5c2")
    v5c3 = Real("v5c3")
    v5= (v5c1, v5c2, v5c3)
    v6c1 = Real("v6c1")
    v6c2 = Real("v6c2")
    v6c3 = Real("v6c3")
    v6= (v6c1, v6c2, v6c3)
    s.add(v0c1== 1) 
    s.add(v0c2== 0) 
    s.add(v0c3== 0) 
    s.add(v1c1== 0) 
    s.add(v1c2== 1) 
    s.add(v1c3== 0) 
    s.add(v3c2 == 0)
    s.add(v4c2 == 0)
    s.add(Or(Not(cross(v0,v2)[0] == 0), Not(cross(v0,v2)[1] == 0), Not(cross(v0,v2)[2] == 0)))
    s.add(Or(Not(cross(v0,cross(cross(v5,v2),v2))[0] == 0), Not(cross(v0,cross(cross(v5,v2),v2))[1] == 0), Not(cross(v0,cross(cross(v5,v2),v2))[2] == 0)))
    s.add(Or(Not(cross(v0,v3)[0] == 0), Not(cross(v0,v3)[1] == 0), Not(cross(v0,v3)[2] == 0)))
    s.add(Or(Not(cross(v0,v4)[0] == 0), Not(cross(v0,v4)[1] == 0), Not(cross(v0,v4)[2] == 0)))
    s.add(Or(Not(cross(v0,v5)[0] == 0), Not(cross(v0,v5)[1] == 0), Not(cross(v0,v5)[2] == 0)))
    s.add(Or(Not(cross(v0,cross(v5,v2))[0] == 0), Not(cross(v0,cross(v5,v2))[1] == 0), Not(cross(v0,cross(v5,v2))[2] == 0)))
    s.add(Or(Not(cross(v0,v6)[0] == 0), Not(cross(v0,v6)[1] == 0), Not(cross(v0,v6)[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),v2)[0] == 0), Not(cross(cross(v0,v1),v2)[1] == 0), Not(cross(cross(v0,v1),v2)[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),cross(cross(v5,v2),v2))[0] == 0), Not(cross(cross(v0,v1),cross(cross(v5,v2),v2))[1] == 0), Not(cross(cross(v0,v1),cross(cross(v5,v2),v2))[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),v3)[0] == 0), Not(cross(cross(v0,v1),v3)[1] == 0), Not(cross(cross(v0,v1),v3)[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),v4)[0] == 0), Not(cross(cross(v0,v1),v4)[1] == 0), Not(cross(cross(v0,v1),v4)[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),v5)[0] == 0), Not(cross(cross(v0,v1),v5)[1] == 0), Not(cross(cross(v0,v1),v5)[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),cross(v5,v2))[0] == 0), Not(cross(cross(v0,v1),cross(v5,v2))[1] == 0), Not(cross(cross(v0,v1),cross(v5,v2))[2] == 0)))
    s.add(Or(Not(cross(cross(v0,v1),v6)[0] == 0), Not(cross(cross(v0,v1),v6)[1] == 0), Not(cross(cross(v0,v1),v6)[2] == 0)))
    s.add(Or(Not(cross(v2,v3)[0] == 0), Not(cross(v2,v3)[1] == 0), Not(cross(v2,v3)[2] == 0)))
    s.add(Or(Not(cross(v2,v1)[0] == 0), Not(cross(v2,v1)[1] == 0), Not(cross(v2,v1)[2] == 0)))
    s.add(Or(Not(cross(v2,v4)[0] == 0), Not(cross(v2,v4)[1] == 0), Not(cross(v2,v4)[2] == 0)))
    s.add(Or(Not(cross(v2,v5)[0] == 0), Not(cross(v2,v5)[1] == 0), Not(cross(v2,v5)[2] == 0)))
    s.add(Or(Not(cross(v2,v6)[0] == 0), Not(cross(v2,v6)[1] == 0), Not(cross(v2,v6)[2] == 0)))
    s.add(Or(Not(cross(cross(cross(v5,v2),v2),v3)[0] == 0), Not(cross(cross(cross(v5,v2),v2),v3)[1] == 0), Not(cross(cross(cross(v5,v2),v2),v3)[2] == 0)))
    s.add(Or(Not(cross(cross(cross(v5,v2),v2),v1)[0] == 0), Not(cross(cross(cross(v5,v2),v2),v1)[1] == 0), Not(cross(cross(cross(v5,v2),v2),v1)[2] == 0)))
    s.add(Or(Not(cross(cross(cross(v5,v2),v2),v4)[0] == 0), Not(cross(cross(cross(v5,v2),v2),v4)[1] == 0), Not(cross(cross(cross(v5,v2),v2),v4)[2] == 0)))
    s.add(Or(Not(cross(cross(cross(v5,v2),v2),v5)[0] == 0), Not(cross(cross(cross(v5,v2),v2),v5)[1] == 0), Not(cross(cross(cross(v5,v2),v2),v5)[2] == 0)))
    s.add(Or(Not(cross(cross(cross(v5,v2),v2),v6)[0] == 0), Not(cross(cross(cross(v5,v2),v2),v6)[1] == 0), Not(cross(cross(cross(v5,v2),v2),v6)[2] == 0)))
    s.add(Or(Not(cross(v3,v4)[0] == 0), Not(cross(v3,v4)[1] == 0), Not(cross(v3,v4)[2] == 0)))
    s.add(Or(Not(cross(v3,v5)[0] == 0), Not(cross(v3,v5)[1] == 0), Not(cross(v3,v5)[2] == 0)))
    s.add(Or(Not(cross(v3,cross(v5,v2))[0] == 0), Not(cross(v3,cross(v5,v2))[1] == 0), Not(cross(v3,cross(v5,v2))[2] == 0)))
    s.add(Or(Not(cross(v3,v6)[0] == 0), Not(cross(v3,v6)[1] == 0), Not(cross(v3,v6)[2] == 0)))
    s.add(Or(Not(cross(v1,v5)[0] == 0), Not(cross(v1,v5)[1] == 0), Not(cross(v1,v5)[2] == 0)))
    s.add(Or(Not(cross(v1,cross(v5,v2))[0] == 0), Not(cross(v1,cross(v5,v2))[1] == 0), Not(cross(v1,cross(v5,v2))[2] == 0)))
    s.add(Or(Not(cross(v1,v6)[0] == 0), Not(cross(v1,v6)[1] == 0), Not(cross(v1,v6)[2] == 0)))
    s.add(Or(Not(cross(v4,v5)[0] == 0), Not(cross(v4,v5)[1] == 0), Not(cross(v4,v5)[2] == 0)))
    s.add(Or(Not(cross(v4,cross(v5,v2))[0] == 0), Not(cross(v4,cross(v5,v2))[1] == 0), Not(cross(v4,cross(v5,v2))[2] == 0)))
    s.add(Or(Not(cross(v4,v6)[0] == 0), Not(cross(v4,v6)[1] == 0), Not(cross(v4,v6)[2] == 0)))
    s.add(Or(Not(cross(v5,v6)[0] == 0), Not(cross(v5,v6)[1] == 0), Not(cross(v5,v6)[2] == 0)))
    s.add(v3[0]*v1[0]+v3[1]*v1[1]+v3[2]*v1[2]== 0) 
    s.add(v4[0]*v1[0]+v4[1]*v1[1]+v4[2]*v1[2]== 0) 
    s.add(v6[0]*cross(v5,v2)[0]+v6[1]*cross(v5,v2)[1]+v6[2]*cross(v5,v2)[2]== 0) 
    f = open("embed_result.txt", "a") 
    f.write( "  "+ str(92) + "  "  +str(s.check())+ '\n' ) 
solve()